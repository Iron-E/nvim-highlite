local Native = require 'highlite.export.native' --- @type highlite.export.Native
local Nvim = require 'highlite.nvim' --- @type highlite.Nvim
local Util = require 'highlite.export.util' --- @type highlite.export.Util

local FMT = [[
" Generated by https://github.com/Iron-E/nvim-highlite
if exists('g:colors_name') | highlight clear | endif

if &background ==# 'dark' %s%s
else%s%s
endif

let g:colors_name = '%s'
]]

--- Disables default values in a `:highlight` command.
local NONE = 'NONE'

--- Used to generate `gui=` and `cterm=` fields of a `:highlight` command.
--- @param definition table
--- @param attribute string
local function attr(definition, attribute)
	return definition[attribute] and attribute .. ',' or ''
end

--- Convert the `base_10` integer to a hex string, or return `NONE`
--- @param base_10? integer
--- @return string
local function hex(base_10)
	return base_10 and '#' .. bit.tohex(base_10, 6) or NONE
end

--- @param filter highlite.export.options.filter
--- @return string
local function fmt_groups(filter)
	local s = ''

	for group, definition in vim.spairs(vim.api.nvim_get_hl(0, {})) do
		if not filter(group, Native.default_hl_group_filter) then
			if definition.link then
				s = s .. '\n\thi! link ' .. group .. ' ' .. definition.link
			else
				if definition.cterm == nil then
					definition.cterm = {}
				end

				local cterm =
					attr(definition.cterm, 'bold') ..
					attr(definition.cterm, 'italic') ..
					attr(definition.cterm, 'nocombine') ..
					attr(definition.cterm, 'reverse') ..
					attr(definition.cterm, 'standout') ..
					attr(definition.cterm, 'strikethrough') ..
					attr(definition.cterm, 'undercurl') ..
					attr(definition.cterm, 'underdashed') ..
					attr(definition.cterm, 'underdotted') ..
					attr(definition.cterm, 'underdouble') ..
					attr(definition.cterm, 'underline')

				local gui =
					attr(definition, 'bold') ..
					attr(definition, 'italic') ..
					attr(definition, 'nocombine') ..
					attr(definition, 'reverse') ..
					attr(definition, 'standout') ..
					attr(definition, 'strikethrough') ..
					attr(definition, 'undercurl') ..
					attr(definition, 'underdashed') ..
					attr(definition, 'underdotted') ..
					attr(definition, 'underdouble') ..
					attr(definition, 'underline')

				s = s .. '\n\thi ' .. group ..
					' blend=' .. (definition.blend or NONE) ..
					' cterm=' .. (#cterm < 1 and NONE or cterm) ..
					' ctermbg=' .. (definition.ctermbg or NONE) ..
					' ctermfg=' .. (definition.ctermfg or NONE) ..
					' gui=' .. (#gui < 1 and NONE or gui) ..
					' guibg=' .. hex(definition.bg) ..
					' guifg=' .. hex(definition.fg) ..
					' guisp=' .. hex(definition.sp)
			end
		end
	end

	return s
end

--- Convert a `nil` value to one that is parseable in VimScript
--- @param color? highlite.color
--- @return string
local function nil_to_null(color)
	return color == nil and 'v:null' or vim.inspect(color)
end

--- @return string
local function fmt_terminal()
	return '\n\n\tlet g:terminal_color_0 = ' .. nil_to_null(vim.g.terminal_color_0) ..
		'\n\tlet g:terminal_color_1 = ' .. nil_to_null(vim.g.terminal_color_1) ..
		'\n\tlet g:terminal_color_2 = ' .. nil_to_null(vim.g.terminal_color_2) ..
		'\n\tlet g:terminal_color_3 = ' .. nil_to_null(vim.g.terminal_color_3) ..
		'\n\tlet g:terminal_color_4 = ' .. nil_to_null(vim.g.terminal_color_4) ..
		'\n\tlet g:terminal_color_5 = ' .. nil_to_null(vim.g.terminal_color_5) ..
		'\n\tlet g:terminal_color_6 = ' .. nil_to_null(vim.g.terminal_color_6) ..
		'\n\tlet g:terminal_color_7 = ' .. nil_to_null(vim.g.terminal_color_7) ..
		'\n\tlet g:terminal_color_8 = ' .. nil_to_null(vim.g.terminal_color_8) ..
		'\n\tlet g:terminal_color_9 = ' .. nil_to_null(vim.g.terminal_color_9) ..
		'\n\tlet g:terminal_color_10 = ' .. nil_to_null(vim.g.terminal_color_10) ..
		'\n\tlet g:terminal_color_11 = ' .. nil_to_null(vim.g.terminal_color_11) ..
		'\n\tlet g:terminal_color_12 = ' .. nil_to_null(vim.g.terminal_color_12) ..
		'\n\tlet g:terminal_color_13 = ' .. nil_to_null(vim.g.terminal_color_13) ..
		'\n\tlet g:terminal_color_14 = ' .. nil_to_null(vim.g.terminal_color_14) ..
		'\n\tlet g:terminal_color_15 = ' .. nil_to_null(vim.g.terminal_color_15)
end

--- NOTE: this function strips out leading dots from colorscheme names, e.g. `.foo` â†’ `foo`.
---       You can use this to create a bootstrap custom colorscheme in `colors/.custom.lua` and it will get written
---       to `colors/custom.lua`.
--- @type highlite.export.format.module
local function export(colorscheme, opts, dir)
	if opts == nil then opts = {} end

	-- checked for backwards compatability
	dir = Util.get_normalized_dir('vim', dir or opts.dir, function ()
		return vim.fn.stdpath('config') .. '/colors/'
	end)

	if opts.filter == nil then
		opts.filter = Native.default_hl_group_filter
	end

	local by_bg = {}
	local filename = opts.filename or colorscheme

	Nvim.with_colorscheme(colorscheme, function()
		Nvim.with_both_bgs(function(bg)
			by_bg[bg] = {groups = fmt_groups(opts.filter), terminal = fmt_terminal()}
		end)
	end)

	return dir .. '/' .. filename .. '.vim',
		FMT:format(by_bg.dark.groups, by_bg.dark.terminal, by_bg.light.groups, by_bg.light.terminal, filename),
		opts
end

return export
