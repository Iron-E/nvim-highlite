--- @type highlite.color.palette.get
local function get(bg, get_terminal)
	local palette, terminal_palette
	if bg ~= 'light' then
		if get_terminal then
			terminal_palette =
			{
				[1] = "#181819",
				[2] = "#FC5D7C",
				[3] = "#9ED072",
				[4] = "#E7C664",
				[5] = "#76CCE0",
				[6] = "#B39DF3",
				[7] = "#F39660",
				[8] = "#E2E2E3",
				[9] = "#7F8490",
				[10] = "#FC5D7C",
				[11] = "#9ED072",
				[12] = "#E7C664",
				[13] = "#76CCE0",
				[14] = "#B39DF3",
				[15] = "#F39660",
				[16] = "#E2E2E3",
			}
		end

		palette =
		{
			annotation = 0x76CCE0,
			attribute = 0x76CCE0,
			bg = 0x2C2E34,
			bg_contrast_high = 0x414550,
			bg_contrast_low = 0x33353F,
			boolean = 0xB39DF3,
			buffer_active = 0xE2E2E3,
			buffer_alternate = 0xA7DF78,
			buffer_current = 0x3B3E48,
			character = 0xE7C664,
			character_special = 0xB39DF3,
			class = 0x76CCE0,
			comment = 0x7F8490,
			comment_documentation = 0x7F8490,
			conditional = 0xFC5D7C,
			constant = 0xE2E2E3,
			constant_builtin = 0xB39DF3,
			constructor = 0x9ED072,
			decorator = 0x9ED072,
			define = 0xFC5D7C,
			diff_add = 0x9ED072,
			diff_change = 0x76CCE0,
			diff_delete = 0xFC5D7C,
			enum = 0x76CCE0,
			error = 0xFC5D7C,
			event = 0xFC5D7C,
			field = 0xF39660,
			field_enum = 0xF39660,
			float = 0xB39DF3,
			fold = 0x33353F,
			func = 0x9ED072,
			func_builtin = 0x9ED072,
			hint = 0x9ED072,
			identifier = 0xF39660,
			include = 0xFC5D7C,
			info = 0x76CCE0,
			interface = 0x76CCE0,
			keyword = 0xFC5D7C,
			keyword_coroutine = 0xFC5D7C,
			keyword_function = 0xFC5D7C,
			keyword_operator = 0xFC5D7C,
			keyword_return = 0xFC5D7C,
			label = 0xFC5D7C,
			loop = 0xFC5D7C,
			macro = 0xB39DF3,
			message = 0xE2E2E3,
			method = 0x9ED072,
			namespace = 0x76CCE0,
			number = 0xB39DF3,
			ok = 0x90EE90,
			operator = 0xFC5D7C,
			parameter = 0xE2E2E3,
			preproc = 0xFC5D7C,
			preproc_conditional = 0xFC5D7C,
			property = 0xF39660,
			punctuation = 0xE2E2E3,
			punctuation_bracket = 0x7F8490,
			punctuation_delimiter = 0x7F8490,
			punctuation_special = 0xE7C664,
			search = 0xA7DF78,
			select = 0x3B3E48,
			special = 0xB39DF3,
			statement = 0xFC5D7C,
			storage = 0xFC5D7C,
			string = 0xE7C664,
			string_escape = 0x9ED072,
			string_regex = 0x9ED072,
			string_special = 0xB39DF3,
			structure = 0x76CCE0,
			syntax_error = 0xFC5D7C,
			tag = 0x76CCE0,
			tag_attribute = 0x9ED072,
			tag_delimiter = 0xFC5D7C,
			text = 0xE2E2E3,
			text_contrast_bg_high = 0xE2E2E3,
			text_contrast_bg_low = 0x7F8490,
			text_literal = 0xE7C664,
			text_reference = 0xF39660,
			throw = 0xFC5D7C,
			todo = 0x76CCE0,
			type = 0x76CCE0,
			type_builtin = 0x76CCE0,
			type_parameter = 0x76CCE0,
			uri = 0x76CCE0,
			variable = 0xE2E2E3,
			variable_builtin = 0xB39DF3,
			warning = 0xE7C664,
		}
	else
		if get_terminal then
			terminal_palette =
			{
				[1] = "#181819",
				[2] = "#FC5D7C",
				[3] = "#9ED072",
				[4] = "#E7C664",
				[5] = "#76CCE0",
				[6] = "#B39DF3",
				[7] = "#F39660",
				[8] = "#E2E2E3",
				[9] = "#7F8490",
				[10] = "#FC5D7C",
				[11] = "#9ED072",
				[12] = "#E7C664",
				[13] = "#76CCE0",
				[14] = "#B39DF3",
				[15] = "#F39660",
				[16] = "#E2E2E3",
			}
		end

		palette =
		{
			annotation = 0x76CCE0,
			attribute = 0x76CCE0,
			bg = 0x2C2E34,
			bg_contrast_high = 0x414550,
			bg_contrast_low = 0x33353F,
			boolean = 0xB39DF3,
			buffer_active = 0xE2E2E3,
			buffer_alternate = 0xA7DF78,
			buffer_current = 0x3B3E48,
			character = 0xE7C664,
			character_special = 0xB39DF3,
			class = 0x76CCE0,
			comment = 0x7F8490,
			comment_documentation = 0x7F8490,
			conditional = 0xFC5D7C,
			constant = 0xE2E2E3,
			constant_builtin = 0xB39DF3,
			constructor = 0x9ED072,
			decorator = 0x9ED072,
			define = 0xFC5D7C,
			diff_add = 0x9ED072,
			diff_change = 0x76CCE0,
			diff_delete = 0xFC5D7C,
			enum = 0x76CCE0,
			error = 0xFC5D7C,
			event = 0xFC5D7C,
			field = 0xF39660,
			field_enum = 0xF39660,
			float = 0xB39DF3,
			fold = 0x33353F,
			func = 0x9ED072,
			func_builtin = 0x9ED072,
			hint = 0x9ED072,
			identifier = 0xF39660,
			include = 0xFC5D7C,
			info = 0x76CCE0,
			interface = 0x76CCE0,
			keyword = 0xFC5D7C,
			keyword_coroutine = 0xFC5D7C,
			keyword_function = 0xFC5D7C,
			keyword_operator = 0xFC5D7C,
			keyword_return = 0xFC5D7C,
			label = 0xFC5D7C,
			loop = 0xFC5D7C,
			macro = 0xB39DF3,
			message = 0xE2E2E3,
			method = 0x9ED072,
			namespace = 0x76CCE0,
			number = 0xB39DF3,
			ok = 0x90EE90,
			operator = 0xFC5D7C,
			parameter = 0xE2E2E3,
			preproc = 0xFC5D7C,
			preproc_conditional = 0xFC5D7C,
			property = 0xF39660,
			punctuation = 0xE2E2E3,
			punctuation_bracket = 0x7F8490,
			punctuation_delimiter = 0x7F8490,
			punctuation_special = 0xE7C664,
			search = 0xA7DF78,
			select = 0x3B3E48,
			special = 0xB39DF3,
			statement = 0xFC5D7C,
			storage = 0xFC5D7C,
			string = 0xE7C664,
			string_escape = 0x9ED072,
			string_regex = 0x9ED072,
			string_special = 0xB39DF3,
			structure = 0x76CCE0,
			syntax_error = 0xFC5D7C,
			tag = 0x76CCE0,
			tag_attribute = 0x9ED072,
			tag_delimiter = 0xFC5D7C,
			text = 0xE2E2E3,
			text_contrast_bg_high = 0xE2E2E3,
			text_contrast_bg_low = 0x7F8490,
			text_literal = 0xE7C664,
			text_reference = 0xF39660,
			throw = 0xFC5D7C,
			todo = 0x76CCE0,
			type = 0x76CCE0,
			type_builtin = 0x76CCE0,
			type_parameter = 0x76CCE0,
			uri = 0x76CCE0,
			variable = 0xE2E2E3,
			variable_builtin = 0xB39DF3,
			warning = 0xE7C664,
		}
	end

	return palette, terminal_palette
end

return get
