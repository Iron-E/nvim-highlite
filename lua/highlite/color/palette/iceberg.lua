--- @type highlite.color.palette.get
local function get(bg, get_terminal)
	local palette, terminal_palette
	if bg ~= 'light' then
		if get_terminal then
			terminal_palette =
			{
				[1] = "#1E2132",
				[2] = "#E27878",
				[3] = "#B4BE82",
				[4] = "#E2A478",
				[5] = "#84A0C6",
				[6] = "#A093C7",
				[7] = "#89B8C2",
				[8] = "#C6C8D1",
				[9] = "#6B7089",
				[10] = "#E98989",
				[11] = "#C0CA8E",
				[12] = "#E9B189",
				[13] = "#91ACD1",
				[14] = "#ADA0D3",
				[15] = "#95C4CE",
				[16] = "#D2D4DE",
			}
		end

		palette =
		{
			annotation = 0xB4BE82,
			attribute = 0xB4BE82,
			bg = 0x161821,
			bg_contrast_high = 0x242940,
			bg_contrast_low = 0x1E2132,
			boolean = 0xA093C7,
			buffer_active = 0xC6C8D1,
			buffer_alternate = 0xE4AA80,
			buffer_current = 0x272C42,
			character = 0xA093C7,
			character_special = 0xB4BE82,
			class = 0x84A0C6,
			comment = 0x6B7089,
			comment_documentation = 0x6B7089,
			conditional = 0x84A0C6,
			constant = 0xA093C7,
			constant_builtin = 0xA093C7,
			constructor = 0xC6C8D1,
			decorator = 0x84A0C6,
			define = 0xB4BE82,
			diff_add = 0xB4BE82,
			diff_change = 0x89B8C2,
			diff_delete = 0xE27878,
			enum = 0x84A0C6,
			error = 0xE27878,
			event = 0x84A0C6,
			field = 0xC6C8D1,
			field_enum = 0xA093C7,
			float = 0xA093C7,
			fold = 0x1E2132,
			func = 0xA3ADCB,
			func_builtin = 0xA3ADCB,
			hint = 0x6B7089,
			identifier = 0x89B8C2,
			include = 0x84A0C6,
			info = 0x89B8C2,
			interface = 0x84A0C6,
			keyword = 0x84A0C6,
			keyword_coroutine = 0x84A0C6,
			keyword_function = 0x84A0C6,
			keyword_operator = 0x84A0C6,
			keyword_return = 0x84A0C6,
			label = 0xB4BE82,
			loop = 0x84A0C6,
			macro = 0xB4BE82,
			message = 0x6B7089,
			method = 0xA3ADCB,
			namespace = 0x84A0C6,
			number = 0xA093C7,
			ok = 0x90EE90,
			operator = 0xC6C8D1,
			parameter = 0xC6C8D1,
			preproc = 0xB4BE82,
			preproc_conditional = 0xB4BE82,
			property = 0xC6C8D1,
			punctuation = 0xC6C8D1,
			punctuation_bracket = 0xC6C8D1,
			punctuation_delimiter = 0xC6C8D1,
			punctuation_special = 0xB4BE82,
			search = 0xE4AA80,
			select = 0x272C42,
			special = 0xB4BE82,
			statement = 0x84A0C6,
			storage = 0x84A0C6,
			string = 0x89B8C2,
			string_escape = 0xB4BE82,
			string_regex = 0x89B8C2,
			string_special = 0xB4BE82,
			structure = 0x84A0C6,
			syntax_error = 0xE27878,
			tag = 0x84A0C6,
			tag_attribute = 0xA093C7,
			tag_delimiter = 0xC6C8D1,
			text = 0xC6C8D1,
			text_contrast_bg_high = 0xC6C8D1,
			text_contrast_bg_low = 0x6B7089,
			text_literal = 0x6B7089,
			text_reference = 0x89B8C2,
			throw = 0x84A0C6,
			todo = 0x45493E,
			type = 0x84A0C6,
			type_builtin = 0x84A0C6,
			type_parameter = 0x84A0C6,
			uri = 0x84A0C6,
			variable = 0xC6C8D1,
			variable_builtin = 0x84A0C6,
			warning = 0xE2A478,
		}
	else
		if get_terminal then
			terminal_palette =
			{
				[1] = "#DCDFE7",
				[2] = "#CC517A",
				[3] = "#668E3D",
				[4] = "#C57339",
				[5] = "#2D539E",
				[6] = "#7759B4",
				[7] = "#3F83A6",
				[8] = "#33374C",
				[9] = "#8389A3",
				[10] = "#CC3768",
				[11] = "#598030",
				[12] = "#B6662D",
				[13] = "#22478E",
				[14] = "#6845AD",
				[15] = "#327698",
				[16] = "#262A3F",
			}
		end

		palette =
		{
			annotation = 0x668E3D,
			attribute = 0x668E3D,
			bg = 0xE8E9EC,
			bg_contrast_high = 0xCBCFDA,
			bg_contrast_low = 0xDCDFE7,
			boolean = 0x7759B4,
			buffer_active = 0x33374C,
			buffer_alternate = 0xEAC6AD,
			buffer_current = 0xC9CDD7,
			character = 0x7759B4,
			character_special = 0x668E3D,
			class = 0x2D539E,
			comment = 0x8389A3,
			comment_documentation = 0x8389A3,
			conditional = 0x2D539E,
			constant = 0x7759B4,
			constant_builtin = 0x7759B4,
			constructor = 0x33374C,
			decorator = 0x2D539E,
			define = 0x668E3D,
			diff_add = 0x668E3D,
			diff_change = 0x3F83A6,
			diff_delete = 0xCC517A,
			enum = 0x2D539E,
			error = 0xCC517A,
			event = 0x2D539E,
			field = 0x33374C,
			field_enum = 0x7759B4,
			float = 0x7759B4,
			fold = 0xDCDFE7,
			func = 0x505695,
			func_builtin = 0x505695,
			hint = 0x8389A3,
			identifier = 0x3F83A6,
			include = 0x2D539E,
			info = 0x3F83A6,
			interface = 0x2D539E,
			keyword = 0x2D539E,
			keyword_coroutine = 0x2D539E,
			keyword_function = 0x2D539E,
			keyword_operator = 0x2D539E,
			keyword_return = 0x2D539E,
			label = 0x668E3D,
			loop = 0x2D539E,
			macro = 0x668E3D,
			message = 0x8389A3,
			method = 0x505695,
			namespace = 0x2D539E,
			number = 0x7759B4,
			ok = 0x90EE90,
			operator = 0x33374C,
			parameter = 0x33374C,
			preproc = 0x668E3D,
			preproc_conditional = 0x668E3D,
			property = 0x33374C,
			punctuation = 0x33374C,
			punctuation_bracket = 0x33374C,
			punctuation_delimiter = 0x33374C,
			punctuation_special = 0x668E3D,
			search = 0xEAC6AD,
			select = 0xC9CDD7,
			special = 0x668E3D,
			statement = 0x2D539E,
			storage = 0x2D539E,
			string = 0x3F83A6,
			string_escape = 0x668E3D,
			string_regex = 0x3F83A6,
			string_special = 0x668E3D,
			structure = 0x2D539E,
			syntax_error = 0xCC517A,
			tag = 0x2D539E,
			tag_attribute = 0x7759B4,
			tag_delimiter = 0x33374C,
			text = 0x33374C,
			text_contrast_bg_high = 0x33374C,
			text_contrast_bg_low = 0x8389A3,
			text_literal = 0x8389A3,
			text_reference = 0x3F83A6,
			throw = 0x2D539E,
			todo = 0xD4DBD1,
			type = 0x2D539E,
			type_builtin = 0x2D539E,
			type_parameter = 0x2D539E,
			uri = 0x2D539E,
			variable = 0x33374C,
			variable_builtin = 0x2D539E,
			warning = 0xC57339,
		}
	end

	return palette, terminal_palette
end

return get
