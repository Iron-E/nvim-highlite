local Native = require 'highlite.export.native' --- @type highlite.export.Native
local Nvim = require 'highlite.nvim' --- @type highlite.Nvim
local Util = require 'highlite.export.util' --- @type highlite.export.Util

local FMT = [[
-- Generated by https://github.com/Iron-E/nvim-highlite

local g = vim.g
if g.colors_name ~= nil then
	vim.api.nvim_command 'highlight clear'
end

local hl = vim.api.nvim_set_hl
if vim.api.nvim_get_option 'background' == 'dark' then%s%s
else%s%s
end

vim.api.nvim_set_var('colors_name', '%s')
]]

--- @param filter highlite.export.options.filter
--- @return string
local function fmt_groups(filter)
	local s = ''

	for group, definition in vim.spairs(vim.api.nvim_get_hl(0, {})) do
		if not filter(group, Native.default_hl_group_filter) then
			s = s .. "\n\thl(0, '" .. group .. "', " .. vim.inspect(definition, {indent = '', newline = ' '}) .. ')'
		end
	end

	return s
end

--- @return string
local function fmt_terminal()
	return '\n\n\tg.terminal_color_0 = ' .. vim.inspect(vim.g.terminal_color_0) ..
		'\n\tg.terminal_color_1 = ' .. vim.inspect(vim.g.terminal_color_1) ..
		'\n\tg.terminal_color_2 = ' .. vim.inspect(vim.g.terminal_color_2) ..
		'\n\tg.terminal_color_3 = ' .. vim.inspect(vim.g.terminal_color_3) ..
		'\n\tg.terminal_color_4 = ' .. vim.inspect(vim.g.terminal_color_4) ..
		'\n\tg.terminal_color_5 = ' .. vim.inspect(vim.g.terminal_color_5) ..
		'\n\tg.terminal_color_6 = ' .. vim.inspect(vim.g.terminal_color_6) ..
		'\n\tg.terminal_color_7 = ' .. vim.inspect(vim.g.terminal_color_7) ..
		'\n\tg.terminal_color_8 = ' .. vim.inspect(vim.g.terminal_color_8) ..
		'\n\tg.terminal_color_9 = ' .. vim.inspect(vim.g.terminal_color_9) ..
		'\n\tg.terminal_color_10 = ' .. vim.inspect(vim.g.terminal_color_10) ..
		'\n\tg.terminal_color_11 = ' .. vim.inspect(vim.g.terminal_color_11) ..
		'\n\tg.terminal_color_12 = ' .. vim.inspect(vim.g.terminal_color_12) ..
		'\n\tg.terminal_color_13 = ' .. vim.inspect(vim.g.terminal_color_13) ..
		'\n\tg.terminal_color_14 = ' .. vim.inspect(vim.g.terminal_color_14) ..
		'\n\tg.terminal_color_15 = ' .. vim.inspect(vim.g.terminal_color_15)
end

--- NOTE: this function strips out leading dots from colorscheme names, e.g. `.foo` â†’ `foo`.
---       You can use this to create a bootstrap custom colorscheme in `colors/.custom.lua` and it will get written
---       to `colors/custom.lua`.
--- @type highlite.export.format.module
local function export(colorscheme, opts, dir)
	if opts == nil then opts = {} end

	-- checked for backwards compatability
	dir = Util.get_normalized_dir('neovim', dir or opts.dir, function ()
		return vim.fn.stdpath('config') .. '/colors/'
	end)

	if opts.filter == nil then
		opts.filter = Native.default_hl_group_filter
	end

	local by_bg = {}
	local filename = opts.filename or colorscheme

	Nvim.with_colorscheme(colorscheme, function()
		Nvim.with_both_bgs(function(bg)
			by_bg[bg] = {groups = fmt_groups(opts.filter), terminal = fmt_terminal()}
		end)
	end)

	return dir .. '/' .. filename .. '.lua',
		FMT:format(by_bg.dark.groups, by_bg.dark.terminal, by_bg.light.groups, by_bg.light.terminal, filename),
		opts
end

return export
